package model;

import java.io.Serializable;
import java.util.ArrayList;

import model.Optionset.Option;

/**
 * Automotive class is a the core part of the car configuration model.
 * In this class, a lot of functions are included. These are the following:
 * $Constructor
 *    1) public Automotive(){}
 *    2) public Automotive(String name, int size, float basePrice){}
 * $Getter
 *    1) public String getName(){}
 *    2) public float getBasePrice(){}
 *    3) public Optionset getOptionsSet(int index){}
 *    4) public Optionset getOptionsSet(String opsetName){}
 * $Find
 *    1) public Optionset findOptionset(String name){}
 *    2) public Optionset findOptionSet(int opsetIndex){}
 *    3) public Option findOption(int opsetIndex, String name){}
 * $Delete
 *    1) public void deleteOptionset(int index){}
 *    2) public void deleteOptionset(String name){}
 *    3) public void deleteOption(int opsetIndex, String optionName){}
 *    4) public void deleteOption(String opsetName, String optionName){}
 * $Update
 *    1) public void updateOptionset(int opsetIndex, String name,int size){}
 *    2) public void updateOptionset(String name,int size){}
 *    3) public void updateOptionName(int opsetIndex, String oldName, String newName){}
 *    4) public void updateOptionName(int opsetIndex, int optionIndex, String newName){}
 *    5) public void updateOptionPrice(int opsetIndex, String name, float price){}
 *    6) public void updateOptionPrice(int opsetIndex, int optionIndex, float price){}
 * $Print
 *    1) public void printBasicInfo(){}
 *    2) public void printAdditionalInfo() {}
 *    
 * Detailed description is shown in each method documentation.
 * <p>
 * All of these functions establish the car configuration model.
 * <p>
 * Also in order to keep our configuration model intact, serialization can be very helpful.
 * So Serializable interface is implemented here. 
 *    
 * @author--Yi
 * @version--1.0
 * @since--Sep/14/2015
 */

//This class will represent the Model
public class Automotbile implements Serializable{
	
	//Declare a serial version UID
	static final long serialVersionUID = 1;
		
	//Each model should have a name
	private String model;
	
	//Each model should have a set of options
	private ArrayList<Optionset> optionSets;
	
	//Each model shuld have many choices
	private ArrayList<Option> choice;
	
	//Each model should have a base price
	private float basePrice;
	
	//Each model should have a make
	private String make;
	
	//Constructor: Two constructors
	/**
	 * Default constructor.
	 */
	public Automotbile(){}
	
	/**
	 * Constructor with arguments.
	 * @param name true
	 * @param size true
	 * @param basePrice true
	 */
	public Automotbile(String model, int size, float basePrice){
		this.model = model;
		this.basePrice = basePrice;
		
		//Create an object for each element in optionSets to avoid null pointer
		for(int i=0;i<size;i++){
			optionSets.set(i, new Optionset());
		}
	}

	//Getters
	/**
	 * 1: Get model name.
	 * @return name
	 */
	public String getModel() {
		return model;
	}
	
	/**
	 * 2:Get model base price.
	 * @return base price
	 */
	public float getBasePrice() {
		return basePrice;
	}
	
	//3:Get option set 
	/**
	 * 3.1: Get option set by optionSets index.
	 * @param index true
	 * @return optionset
	 */
	public Optionset getOptionsSet(int index){
		if(index<optionSets.size() && index>=0){
			if(optionSets.get(index)!=null){
				return optionSets.get(index);
			}
		}
		return null;
	}
	
	/**
	 * 3.2: Get option set by optionSets name.
	 * @param opsetName true
	 * @return optionset
	 */
	public Optionset getOptionsSet(String opsetName){
		for(int i=0;i<optionSets.size();i++){
			if(optionSets.get(i)!=null && optionSets.get(i).getName().equals(opsetName)){
				return optionSets.get(i);
			}
		}
		return null;
	}
	
	/**
	 * 4. This method is to get the option price given set name and option name.
	 * @param setIndex
	 * @param optionName
	 * @return
	 */
	public float getOptionPrice(int setIndex, String optionName) {
		if(setIndex>=0 && setIndex < optionSets.size()) {
			if(optionSets.get(setIndex)!=null) {
				Option[] temp = optionSets.get(setIndex).getOpt();
				for(int i=0;i<temp.length;i++) {
					if(temp[i].getName().equals(optionName)) {
							return temp[i].getPrice();
					}
				}
			}
		}
		return 0;
	}
	
	/**
	 * This is to return the make.
	 * @return
	 */
	public String getMake() {
		return this.make;
	}
	
	/**
	 * This method is to get the option choice.
	 * @param setName
	 * @return
	 */
	public String getOptionChoice(String setName) {
		for(int i=0;i<optionSets.size();i++) {
			if(optionSets.get(i).getName().equals(setName)) {
				Option choice = optionSets.get(i).getOptionChoice();
				return choice.getName();
			}
		}
		return null;
	}
	
	/**
	 * This method is to return the option choice price
	 * @param setName
	 * @return
	 */
	public float getOptionChoicePrice(String setName) {
		for(int i=0;i<optionSets.size();i++) {
			if(optionSets.get(i).getName().equals(setName)) {
				Option choice = optionSets.get(i).getOptionChoice();
				return choice.getPrice();
			}
		}
		return 0;
	}
	
	public float getTotalPrice() {
		float totalPrice = 0;
		for(int i=0;i<optionSets.size();i++) {
			totalPrice += getOptionChoicePrice(optionSets.get(i).getName());
		}
		return totalPrice;
	}
	//Setters functions
	/**
	 * 1: Set model name.
	 * @param name true
	 */
	public void setModel(String model) {
		this.model = model;
	}
	
	/**
	 * 2: Set model base price.
	 * @param basePrice true
	 */
	public void setBasePrice(float basePrice) {
		this.basePrice = basePrice;
	}
	
	//3. Set option set
	/**
	 * 3.1 : Set option set name and size by its optionset index.
	 * @param index true 
	 * @param name true
	 * @param size true
	 */
	public void setOptionsetValue(int index,String name,int size){
		if(index<optionSets.size() && index>=0){
			optionSets.set(index, new Optionset(name,size)) ;
		}
	}
	
	/**
	 * 3.2 : Set option set size by its name.
	 * @param name true
	 * @param size true
	 */
		public void setOptionsetValue(String name,int size){
			for(int i=0;i<optionSets.size();i++){
				if(optionSets.get(i).getName().equals(name)){
					optionSets.set(i, new Optionset(name,size));
				}
			}
		}
	
	/**
	 * 4: Set option name, price with its optionset index and option index.
	 * @param opsetIndex true
	 * @param optionName true
	 * @param price true
	 * @param optionIndex true
	 */
	public void setOptionValue(int opsetIndex, String optionName, 
			                   float price,int optionIndex) {
		if(getOptionsSet(opsetIndex)!=null){
			optionSets.get(opsetIndex).setOption(optionIndex, optionName, price);
		}
	}
	
	/**
	 * This method is to set make name.
	 * @param make
	 */
	public void setMake(String make) {
		this.make = make;
	}
	
	/**
	 * This method is to set an option choice according to its set name and option name
	 * @param setName
	 * @param optionName
	 */
	public void setOptionChoice(String setName, String optionName) {
		for(int i=0;i<optionSets.size();i++) {
			if(optionSets.get(i).getName().equals(setName)) {
				optionSets.get(i).setOptionChoice(optionName);
			}
		}
	}
	
	
	
	
	//Findings functions
	//1: Find option set
	/**
	 * 1.1: Find option set with its name.
	 * @param name true
	 * @return Optionset
	 */
	public Optionset findOptionset(String name){	
		
		//Loop to pick out the option name same to the input
		for(int i=0;i<optionSets.size();i++){
			if(optionSets.get(i)!=null){
				if(optionSets.get(i).getName().equals(name)) return optionSets.get(i);
			}
		}
		return null;
	}
	
	/**
	 * 1.2: Find option set with its index.
	 * @param opsetIndex true
	 * @return Optionset
	 */
	public Optionset findOptionSet(int opsetIndex){
		if(opsetIndex<optionSets.size() && opsetIndex>=0){
			if(optionSets.get(opsetIndex)!=null){
				return optionSets.get(opsetIndex);
				}
		}
		return null;
	}
	
	/**
	 * 2: Find option in one optionset.
	 * @param opsetIndex true
	 * @param name true
	 * @return Option
	 */
	public Option findOption(int opsetIndex, String name){

		if(opsetIndex<optionSets.size() && opsetIndex>=0){
			if(optionSets.get(opsetIndex)!=null){
				optionSets.get(opsetIndex).getOption(name);
			}
		}
		return null;
	}
	
	
	//Delete functions
	//1: Delete option set
	/**
	 * 1.1: Delete option set with its index.
	 * @param index true
	 */
    public void deleteOptionset(int index) {
		
		if(index<optionSets.size() && index>=0){
			if(optionSets.get(index)!=null){
				optionSets.set(index, null);
			}
		}
	}
    
    /**
     * 1.2: Delete optionset with its name.
     * @param name true
     */
    public void deleteOptionset(String name){
    	for(int i=0;i<optionSets.size();i++){
    		if(optionSets.get(i)!=null && optionSets.get(i).getName().equals(name)){
    			optionSets.set(i, null);
    		}
    	}
    }
    
    //2: Delete option
    /**
     * 2.1: Delete option with its optionSets index and its name.
     * @param opsetIndex true
     * @param optionName true
     */
	public void deleteOption(int opsetIndex, String optionName){
		
		if(opsetIndex<optionSets.size() && opsetIndex>=0){
			if(optionSets.get(opsetIndex)!=null){
				optionSets.get(opsetIndex).deleteOption(optionName);
			}
		}
	}
	
	/**
	 * 2.2: Delete option with its optionSets name and its name.
	 * @param opsetName true
	 * @param optionName true
	 */
    public void deleteOption(String opsetName, String optionName){
		for(int i=0;i<optionSets.size();i++){
			if(optionSets.get(i)!=null && optionSets.get(i).getName().equals(opsetName)){
				optionSets.get(i).deleteOption(optionName);
			}
		}
	}
	
	//Update functions
	
    //1: Update option set name and size
    /**
     * 1.1: Update option set with its optionSets index and update its name and size.
     * @param opsetIndex true
     * @param name true
     * @param size true
     */
	public void updateOptionset(int opsetIndex, String name,int size) {
		if(opsetIndex<optionSets.size() && opsetIndex>=0){
			Optionset result = new Optionset(name,size);
			Option[] tempSrc =  optionSets.get(opsetIndex).getOpt();
			Option[] tempDes = result.getOpt();
			for(int i=0;i<size;i++){
				tempDes[i] = tempSrc[i];
			}
			result.setOpt(tempDes);
			optionSets.set(opsetIndex, result);
		}
	}
	
	/**
	 * 1.2: Update optionset size.
	 * @param name true
	 * @param size true
	 */
	public void updateOptionset(String name,int size) {
		for(int i=0;i<optionSets.size();i++){
			if(optionSets.get(i)!=null && optionSets.get(i).getName().equals(name)){
				Optionset result = new Optionset(name,size);
				Option[] tempSrc =  optionSets.get(i).getOpt();
				Option[] tempDes = result.getOpt();
				for(int j=0;j<size;j++){
					if(j<tempSrc.length){
						tempDes[j] = tempSrc[j];
					}else{
						tempDes[j] = null;
					}
				}
				result.setOpt(tempDes);
				optionSets.set(i, result);
			}
		}
	}
	
	/**
	 * 1.3: Update option set name. 
	 * This method is to update option set name with its old name and its new name.
	 * @param oldName true
	 * @param newName true
	 */
	public void updateOptionSetName(String oldName, String newName) {
		for(int i=0;i<optionSets.size();i++) {
			if(optionSets.get(i)!=null && optionSets.get(i).getName().equals(oldName)) {
				optionSets.get(i).setName(newName);
			}
		}
		
	}
	
	//2: Update option name
	/**
	 * 2.1: Update option name with its optionSets index and its old name.
	 * @param opsetIndex true
	 * @param oldName true
	 * @param newName true
	 */
	public void updateOptionName(int opsetIndex, String oldName, String newName) {
		if(opsetIndex<optionSets.size() && opsetIndex>=0){
			if(optionSets.get(opsetIndex)!=null){
			optionSets.get(opsetIndex).updateOptionName(oldName, newName);
			}
		}
	}
	
	/**
	 * 2.2: Update option name with its optionSets index and its old name.
	 * @param opsetIndex true
	 * @param optionIndex true
	 * @param newName true
	 */
	public void updateOptionName(int opsetIndex, int optionIndex, String newName) {
		if(opsetIndex<optionSets.size() && opsetIndex>=0){
			if(optionSets.get(opsetIndex)!=null){
			optionSets.get(opsetIndex).updateOptionName(optionIndex, newName);
			}
		}
	}
	
	
	//3: Update option price
	/**
	 * 3.1: Update option price with its optionSets index and its name.
	 * @param opsetIndex true
	 * @param name true
	 * @param price true
	 */
	public void updateOptionPrice(int opsetIndex, String name, float price) {
		if(opsetIndex<optionSets.size() && opsetIndex>=0){
			if(optionSets.get(opsetIndex)!=null){
			optionSets.get(opsetIndex).updateOptionPrice(name, price);
			}
		}
	}
	
	/**
	 * 3.2: Update option price with its optionSets index and its option index.
	 * @param opsetIndex true
	 * @param optionIndex true
	 * @param price true
	 */
	public void updateOptionPrice(int opsetIndex, int optionIndex, float price) {
		if(opsetIndex<optionSets.size() && opsetIndex>=0){
			if(optionSets.get(opsetIndex)!=null){
			optionSets.get(opsetIndex).updateOptionPrice(optionIndex, price);
			}
		}
	}
	
	/**
	 * This method is to update an option price with in its option set name and its option name.
	 * @param optionSetName
	 * @param optionName
	 * @param price
	 */
	public void updateOptionPrice(String optionSetName, String optionName, float price) {
		for(int i=0;i<optionSets.size();i++) {
			if(optionSets[i]!=null && optionSets[i].getName().equals(optionSetName)) {
				for(int j=0;j<optionSets[i].getOpt().length;j++) {
					if(optionSets[i].getOpt()[j]!=null && optionSets[i].getOpt()[j].getName().equals(optionName)) {
						optionSets[i].getOpt()[j].setPrice(price);
					}
				}
			}
		}
	}
	//Print out all information
	/**
	 * Print basic information.
	 */
	public void printBasicInfo(){
		System.out.println("The following information is model basic information: ");
		System.out.println();
		System.out.println("# Car model: " + getName());
		System.out.println("# Base price: $" 
		                  + String.format("%.2f", getBasePrice()));
		System.out.println();
	}
	
	/**
	 * Print all other additional information.
	 */
	public void printAdditionalInfo() {
		
		System.out.println("The following information is model additional information: ");
		System.out.println();
		for(int i=0;i<optionSets.length;i++){
			if(optionSets[i]!=null){
				System.out.println("#" + optionSets[i].getName() + ": ");
				optionSets[i].print();
			}else{
				System.out.println("This option set does not exist or has been deleted");
			}
			System.out.println();
		}
		System.out.println("--------------------------------------------");
	}
	
}
